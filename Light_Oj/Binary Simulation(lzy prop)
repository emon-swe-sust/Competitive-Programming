#include<bits/stdc++.h>
using namespace std;
int arr[1000003];
int tree[1000003*3];
int prop[1000003*3];
 
void init(int node,int b,int e)
{
    if(b>e)
        return;
    if(b==e)
    {
        tree[node] = arr[b];
        return;
    }
    int mid,left,right;
    mid = (b+e)/2;
    left = node*2;
    right = node*2+1;
    init(left,b,mid);
    init(right,mid+1,e);
    tree[node] = tree[left] + tree[right];
    return;
}
 
void update(int node,int b,int e,int i,int j,int x)
{
    if (i > e || j < b)
        return;
    if (b >= i && e <= j)
    {
        tree[node] += ((e - b + 1) * x);
        prop[node] += x;
        return;
    }
    int Left = node * 2;
    int Right = (node * 2) + 1;
    int mid = (b + e) / 2;
    update(Left, b, mid, i, j, x);
    update(Right, mid + 1, e, i, j, x);
    tree[node] = tree[Left] + tree[Right] + (e - b + 1) * prop[node];
    return;
}
 
int query(int node, int b, int e, int i, int j, int carry)
{
    if (i > e || j < b)
        return 0;
 
    if (b >= i and e <= j)
        return tree[node] + carry * (e - b + 1);
 
    int Left = node * 2;
    int Right = (node * 2) + 1;
    int mid = (b + e) / 2;
 
    int p1 = query(Left, b, mid, i, j, carry + prop[node]);
    int p2 = query(Right, mid + 1, e, i, j, carry + prop[node]);
 
    return p1 + p2;
}
 
int main()
{
    int test,x,siz;
    //cin >> test;
    scanf("%d",&test);
    for(x=1; x<=test; x++)
    {
        memset(arr,0,sizeof(arr));
        memset(tree,0,sizeof(tree));
        memset(prop,0,sizeof(prop));
 
        char str[100005];
        //cin >> str;
        scanf("%s",str);
 
        siz = strlen(str);
        int i,j,que;
        for(i=0; i<siz; i++)
        {
            arr[i+1] = str[i]-'0';
        }
        init(1,1,siz);
        //cout << "Case " << x << ":" << endl;
        printf("Case %d:\n",x);
        //cin >> que;
        scanf("%d",&que);
 
        while(que--)
        {
            //cout << " Q ";
            char c;
            getchar();
            c=getchar();
 
            if(c == 'I')
            {
                int f,t;
                //cin >> f >> t ;
                scanf("%d %d",&f,&t);
                update(1,1,siz,f,t,1);
            }
            else if(c == 'Q')
            {
                int s,val;
                //cin >> s;
                scanf("%d",&s);
                val = query(1,1,siz,s,s,0);
                //cout << val%2 << endl;
                printf("%d\n",val%2);
            }
        }
    }
    return 0;
}
